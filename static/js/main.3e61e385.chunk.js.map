{"version":3,"sources":["Helpers.tsx","Components/Tile.tsx","Components/Board.tsx","Components/GameComponent.tsx","GameContainer.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","MoveDirection","Coordinate","x","y","generateRandomNumber","min","max","Math","floor","random","addRandomTile","currState","tileValueIs2","tiles","c","alert","emptyTilesLeft","findMergeableTile","UP","DOWN","LEFT","RIGHT","isThereAnyAvailableMove","gameState","LOST","addTile","gravityLeft","moved","moveTileValue","gravityRight","BOARD_SIDE","gravityUp","gravityDown","m","tileXYValue","i","console","log","handleMerge","isHorizontal","mergeAndClearTiles","score","WON","src","dest","toMerge","toClear","clear","Tile","props","className","style","value","Board","tileValue","color","backgroundColor","push","this","map","key","chooseTileStyle","Component","GameComponent","wonLostLabelStyle","text","onClick","generateNewGame","GameContainer","state","getStartingState","handleKeyDown","bind","document","addEventListener","event","move","Array","fill","startingState","RUNNING","greatestTile","setState","updatedState","Object","assign","moveLeft","moveUp","moveDown","moveRight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e61e385.chunk.js","sourcesContent":["import {AppState} from \"./GameContainer\";\n\nexport enum GameState {\n    RUNNING,\n    LOST,\n    WON\n}\n\nexport enum MoveDirection {\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT\n}\n\nexport interface Coordinate {\n    x : number,\n    y : number\n}\n\nexport const BOARD_SIDE : number = 4;\nexport const EMPTY_TILE_VALUE : number = 0;\nexport const TARGET : number = 2048;\n\nexport function Coordinate(x : number, y : number) : Coordinate {\n    return {x, y};\n}\n\n/* Return a random integer from min up to max (excluding max) */\nexport function generateRandomNumber(min : number, max : number): number {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function addRandomTile(currState : AppState, tileValueIs2 : boolean) {\n    let tiles : number[][] = currState.tiles;\n    let x, y : number;\n    do {\n        x = generateRandomNumber(0, BOARD_SIDE);\n        y = generateRandomNumber(0, BOARD_SIDE);\n    } while (tiles[x][y] !== EMPTY_TILE_VALUE);\n\n    addTile(currState, Coordinate(x, y), tileValueIs2);\n}\n\nfunction addTile(currState : AppState, c : Coordinate, tileValueIs2 : boolean) {\n    let tiles : number[][] = currState.tiles;\n    if (tiles[c.x][c.y] !== EMPTY_TILE_VALUE) {\n        alert(\"ERROR\");\n    } else {\n        if (tileValueIs2) {\n            tiles[c.x][c.y] = 2;\n        } else {\n            tiles[c.x][c.y] = (Math.random() < 0.5) ? 2 : 4;\n        }\n        currState.emptyTilesLeft--;\n        if (currState.emptyTilesLeft === 0 && !isThereAnyAvailableMove(tiles))\n            currState.gameState = GameState.LOST;\n    }\n}\n\nexport function moveLeft(currState : AppState) : void {\n    let tiles : number[][] = currState.tiles;\n    for (let y : number = 0; y < BOARD_SIDE; y++) {\n        for (let x : number = 0; x < BOARD_SIDE; x++) {\n            if (tiles[x][y] !== EMPTY_TILE_VALUE) {\n                let i : number = findMergeableTile(tiles, Coordinate(x, y), MoveDirection.LEFT);\n                if (i !== -1) {\n                    currState.moved = true;\n                    handleMerge(currState, Coordinate(x, y), i, true);\n                }\n                gravityLeft(currState, Coordinate(x, y));\n            }\n        }\n    }\n}\n\nfunction gravityLeft(currState : AppState, c : Coordinate) : void {\n    let tiles : number[][] = currState.tiles;\n    while (c.x > 0 && tiles[c.x-1][c.y] === EMPTY_TILE_VALUE) {\n        currState.moved = true;\n        moveTileValue(tiles, c, Coordinate(c.x-1, c.y));\n        c.x--;\n    }\n}\n\nexport function moveRight(currState : AppState) : void {\n    let tiles : number[][] = currState.tiles;\n    for (let y : number = 0; y < BOARD_SIDE; y++) {\n        for (let x : number = BOARD_SIDE - 1; x >= 0; x--) {\n            if (tiles[x][y] !== EMPTY_TILE_VALUE) {\n                let i : number = findMergeableTile(tiles, Coordinate(x, y), MoveDirection.RIGHT);\n                if (i !== -1) {\n                    currState.moved = true;\n                    handleMerge(currState, Coordinate(x, y), i, true);\n                }\n                gravityRight(currState, Coordinate(x, y));\n            }\n        }\n    }\n}\n\nfunction gravityRight(currState : AppState, c : Coordinate) : void {\n    let tiles : number[][] = currState.tiles;\n    while (c.x < BOARD_SIDE - 1 && tiles[c.x+1][c.y] === EMPTY_TILE_VALUE) {\n        currState.moved = true;\n        moveTileValue(tiles, c, Coordinate(c.x+1, c.y));\n        c.x++;\n    }\n}\n\nexport function moveUp(currState : AppState) : void {\n    let tiles : number[][] = currState.tiles;\n    for (let x : number = 0; x < BOARD_SIDE; x++) {\n        for (let y : number = 0; y < BOARD_SIDE; y++) {\n            if (tiles[x][y] !== EMPTY_TILE_VALUE) {\n                let i : number = findMergeableTile(tiles, Coordinate(x, y), MoveDirection.UP);\n                if (i !== -1) {\n                    currState.moved = true;\n                    handleMerge(currState, Coordinate(x, y), i, false);\n                }\n                gravityUp(currState, Coordinate(x, y));\n            }\n        }\n    }\n}\n\nfunction gravityUp(currState : AppState, c : Coordinate) : void {\n    let tiles : number[][] = currState.tiles;\n    while (c.y > 0 && tiles[c.x][c.y-1] === EMPTY_TILE_VALUE) {\n        currState.moved = true;\n        moveTileValue(tiles, c, Coordinate(c.x, c.y-1));\n        c.y--;\n    }\n}\n\nexport function moveDown(currState : AppState) : void {\n    let tiles : number[][] = currState.tiles;\n    for (let x : number = 0; x < BOARD_SIDE; x++) {\n        for (let y : number = BOARD_SIDE - 1; y >= 0; y--) {\n            if (tiles[x][y] !== EMPTY_TILE_VALUE) {\n                let i : number = findMergeableTile(tiles, Coordinate(x, y), MoveDirection.DOWN);\n                if (i !== -1) {\n                    currState.moved = true;\n                    handleMerge(currState, Coordinate(x, y), i, false);\n                }\n                gravityDown(currState, Coordinate(x, y));\n            }\n        }\n    }\n}\n\nfunction gravityDown(currState : AppState, c : Coordinate) : void {\n    let tiles : number[][] = currState.tiles;\n    while (c.y < BOARD_SIDE - 1 && tiles[c.x][c.y+1] === EMPTY_TILE_VALUE) {\n        currState.moved = true;\n        moveTileValue(tiles, c, Coordinate(c.x, c.y+1));\n        c.y++;\n    }\n}\n\nfunction findMergeableTile(tiles : number[][], c : Coordinate, m : MoveDirection) : number {\n    let tileXYValue : number = tiles[c.x][c.y];\n    switch (m) {\n        case MoveDirection.UP:\n            for (let i : number = c.y+1; i < BOARD_SIDE; i++) {\n            if (tiles[c.x][i] !== tileXYValue && tiles[c.x][i] !== EMPTY_TILE_VALUE)\n                break;\n            if (tiles[c.x][i] === tileXYValue)\n                return i;\n        }\n            break;\n        case MoveDirection.DOWN:\n            for (let i : number = c.y-1; i >= 0; i--) {\n            if (tiles[c.x][i] !== tileXYValue && tiles[c.x][i] !== EMPTY_TILE_VALUE)\n                break;\n            if (tiles[c.x][i] === tileXYValue)\n                return i;\n        }\n            break;\n        case MoveDirection.LEFT:\n            for (let i : number = c.x+1; i < BOARD_SIDE; i++) {\n            if (tiles[i][c.y] !== tileXYValue && tiles[i][c.y] !== EMPTY_TILE_VALUE)\n                break;\n            if (tiles[i][c.y] === tileXYValue)\n                return i;\n        }\n            break;\n        case MoveDirection.RIGHT:\n            for (let i : number = c.x-1; i >= 0; i--) {\n            if (tiles[i][c.y] !== tileXYValue && tiles[i][c.y] !== EMPTY_TILE_VALUE)\n                break;\n            if (tiles[i][c.y] === tileXYValue)\n                return i;\n        }\n            break;\n        default:\n            console.log(\"ERROR\");\n    }\n    return -1;\n}\n\nfunction handleMerge(currState : AppState, c : Coordinate,  i : number, isHorizontal : boolean) : void {\n    let tiles : number[][] = currState.tiles;\n    if (isHorizontal)\n        mergeAndClearTiles(tiles, c, Coordinate(i, c.y));\n    else\n        mergeAndClearTiles(tiles, c, Coordinate(c.x, i));\n\n    currState.score += tiles[c.x][c.y];\n    currState.emptyTilesLeft++;\n\n    if (tiles[c.x][c.y] === TARGET)\n        currState.gameState = GameState.WON;\n}\n\nfunction moveTileValue(tiles : number[][], src : Coordinate, dest : Coordinate) : void {\n    tiles[dest.x][dest.y] = tiles[src.x][src.y];\n    tiles[src.x][src.y] = EMPTY_TILE_VALUE;\n}\n\nfunction mergeAndClearTiles(tiles : number[][], toMerge : Coordinate, toClear : Coordinate) : void {\n    if (tiles[toMerge.x][toMerge.y] !== tiles[toClear.x][toClear.y]) {\n        console.log(\"ERROR\");\n    }\n    else {\n        tiles[toMerge.x][toMerge.y] *= 2;\n        clear(tiles, toClear);\n    }\n}\n\nfunction clear(tiles : number[][], c : Coordinate) : void {\n    tiles[c.x][c.y] = EMPTY_TILE_VALUE;\n}\n\nfunction isThereAnyAvailableMove(tiles : number[][]) : boolean {\n    for (let y : number = 0; y < BOARD_SIDE; y++) {\n        for (let x : number = 0; x < BOARD_SIDE; x++) {\n            if (findMergeableTile(tiles, Coordinate(x, y), MoveDirection.UP)    !== -1 ||\n                findMergeableTile(tiles, Coordinate(x, y), MoveDirection.DOWN)  !== -1 ||\n                findMergeableTile(tiles, Coordinate(x, y), MoveDirection.LEFT)  !== -1 ||\n                findMergeableTile(tiles, Coordinate(x, y), MoveDirection.RIGHT) !== -1)\n                return true;\n        }\n    }\n    return false;\n}","import React from \"react\";\ninterface TileProps {\n    value: number,\n    style: object,\n}\n\nfunction Tile(props : TileProps) {\n    return (\n        <div\n            className=\"tile\"\n            style={props.style}\n        >\n            {props.value}\n        </div>\n    );\n}\nexport default Tile;","import React, {Component} from \"react\";\nimport {BOARD_SIDE} from \"../Helpers\";\nimport Tile from \"./Tile\";\n\ninterface BoardProps {\n    tiles       : number[][]\n}\n\nclass Board extends Component<BoardProps, {}> {\n    chooseTileStyle(tileValue : number) : {color: string, backgroundColor: string} {\n        switch (tileValue) {\n            case 2:     return {color: \"black\", backgroundColor: \"white\"};\n            case 4:     return {color: \"black\", backgroundColor: \"papayawhip\"};\n            case 8:     return {color: \"white\", backgroundColor: \"navajowhite\"};\n            case 16:    return {color: \"white\", backgroundColor: \"coral\"};\n            case 32:    return {color: \"white\", backgroundColor: \"lightcoral\"};\n            case 64:    return {color: \"white\", backgroundColor: \"indianred\"};\n            case 128:   return {color: \"white\", backgroundColor: \"gold\"};\n            case 256:   return {color: \"white\", backgroundColor: \"gold\"};\n            case 512:   return {color: \"white\", backgroundColor: \"gold\"};\n            case 1024:  return {color: \"white\", backgroundColor: \"gold\"};\n            case 2048:  return {color: \"white\", backgroundColor: \"gold\"};\n            default:    return {color: \"whitesmoke\", backgroundColor: \"whitesmoke\"};\n        }\n    }\n\n    render() {\n        let i : number = 0;\n        let tiles : number[] = [];\n        for (let y = 0; y < BOARD_SIDE; y++) {\n            for (let x = 0; x < BOARD_SIDE; x++) {\n                tiles.push(this.props.tiles[x][y]);\n            }\n        }\n\n        return (\n            <div className=\"board\">\n                {tiles.map((tileValue : number) => {\n                    return <Tile\n                        key={i++}\n                        value={tileValue}\n                        style={this.chooseTileStyle(tileValue)}\n                    />;\n                })}\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React from \"react\";\nimport Board from \"./Board\";\nimport {GameState} from \"../Helpers\";\n\ninterface GameProps {\n    gameState           : GameState,\n    score               : number,\n    tiles               : number[][],\n    generateNewGame     : () => void\n}\nfunction GameComponent(props : GameProps) {\n    let wonLostLabelStyle : {className : string, text : string};\n    if (props.gameState === GameState.WON) {\n        wonLostLabelStyle = {\n            className: \"won-label\",\n            text: \"You Win!\"\n        };\n    } else if (props.gameState === GameState.LOST) {\n        wonLostLabelStyle = {\n            className: \"lost-label\",\n            text: \"You Lost.\"\n        };\n    } else {\n        wonLostLabelStyle = {\n            className: \"running-label\",\n            text: \"\",\n        };\n    }\n    return (\n        <div className=\"app\">\n            <div className=\"game\">\n                <div className=\"header\">2048</div>\n                <div className=\"status-block\">\n                    <label className=\"score-block\">Score: {props.score}</label>\n                    <br />\n                    <button className=\"reset-button\" onClick={() => props.generateNewGame()}>New Game</button>\n                    <label className={wonLostLabelStyle.className}>{wonLostLabelStyle.text}</label>\n                </div>\n                <div> <Board tiles={props.tiles}/> </div>\n            </div>\n        </div>\n    );\n}\n\nexport default GameComponent;","import React, {Component} from \"react\";\nimport GameComponent from \"./Components/GameComponent\";\nimport {\n    addRandomTile,\n    BOARD_SIDE,\n    GameState,\n    MoveDirection,\n    moveDown,\n    moveLeft,\n    moveRight,\n    moveUp\n} from \"./Helpers\";\n\nexport interface AppState {\n    gameState       : GameState,\n    score           : number,\n    tiles           : number[][],\n    moved           : boolean,\n    greatestTile    : number,\n    emptyTilesLeft  : number\n}\nclass GameContainer extends Component<{}, AppState> {\n\n    constructor(props : object) {\n        super(props);\n        this.state = this.getStartingState();\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n\n    componentDidMount() : void {\n        document.addEventListener(\"keydown\", (event : KeyboardEvent) => this.handleKeyDown(event));\n        // document.addEventListener(\"keydown\", this.handleKeyDown)\n    }\n\n    componentWillUnmount() : void {\n        // document.removeEventListener(\"keydown\", this.handleKeyDown); // cannot work because of anonymous function\n    }\n\n    handleKeyDown(event : KeyboardEvent) : any {\n        switch (event.key) {\n            case \"ArrowLeft\":   this.move(this.state, MoveDirection.LEFT);  return;\n            case \"ArrowUp\":     this.move(this.state, MoveDirection.UP);    return;\n            case \"ArrowDown\":   this.move(this.state, MoveDirection.DOWN);  return;\n            case \"ArrowRight\":  this.move(this.state, MoveDirection.RIGHT); return;\n            default:\n        }\n    }\n\n    getStartingState() : AppState {\n        let tiles : number[][] = new Array(4)\n            .fill(0)\n            .map(\n                () => new Array(4).fill(0)\n            );\n        let startingState : AppState = {\n            gameState: GameState.RUNNING,\n            score: 0,\n            tiles: tiles,\n            moved: false,\n            greatestTile: 2,\n            emptyTilesLeft: BOARD_SIDE * BOARD_SIDE,\n        };\n        addRandomTile(startingState, true);\n        addRandomTile(startingState, true);\n        return startingState;\n    }\n\n    generateNewGame() : void {\n        this.setState(() => {\n            return this.getStartingState();\n        });\n    }\n\n    move(currState : Readonly<AppState>, m : MoveDirection) : void {\n        if (this.state.gameState === GameState.RUNNING) {\n            let updatedState : AppState = Object.assign({}, currState);\n            updatedState.moved = false;\n\n            switch (m) {\n                case MoveDirection.LEFT:\n                    moveLeft(updatedState);\n                    break;\n                case MoveDirection.UP:\n                    moveUp(updatedState);\n                    break;\n                case MoveDirection.DOWN:\n                    moveDown(updatedState);\n                    break;\n                case MoveDirection.RIGHT:\n                    moveRight(updatedState);\n                    break;\n                default:\n            }\n            if (updatedState.moved) {\n                addRandomTile(updatedState, false);\n            }\n\n            this.setState(() => {\n                return updatedState;\n            });\n        }\n    }\n\n    render() {\n        return (\n            <GameComponent\n                gameState={this.state.gameState}\n                score={this.state.score}\n                tiles={this.state.tiles}\n                generateNewGame={this.generateNewGame}/>\n        );\n    }\n}\n\nexport default GameContainer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. GameComponent is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GameContainer from \"./GameContainer\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}